// Оператор взятия остатка %
alert(5 % 2); // 1, остаток от деления 5 на 2
alert(8 % 3); // 2, остаток от деления 8 на 3
alert(8 % 4); // 0, остаток от деления 8 на 4

// Оператор возведения в степень a ** b возводит a в степень b.
alert(2 ** 2); // 2² = 4
alert(2 ** 3); // 2³ = 8
alert(2 ** 4); // 2⁴ = 16

alert(4 ** (1 / 2)); // 2 (степень 1/2 эквивалентна взятию квадратного корня)
alert(8 ** (1 / 3)); // 2 (степень 1/3 эквивалентна взятию кубического корня)

// ======== Сложение и преобразование строк ========

alert("1" + 2); // "12"
alert(2 + "1"); // "21"
alert(2 + 2 + "1"); // будет "41", а не "221"

alert(6 - "2"); // 4, '2' приводится к числу
alert("6" / "2"); // 3, оба операнда приводятся к числам

// ======== унарный плюс + ========

// Преобразует не числа в числа
alert(+true); // 1
alert(+""); // 0
// это то же самое, что и Number(...), только короче.

let apples = "2";
let oranges = "3";
// оба операнда предварительно преобразованы в числа
alert(+apples + +oranges); // 5
// более длинный вариант
// alert( Number(apples) + Number(oranges) ); // 5

// Сокращённая арифметика с присваиванием
let n = 2;
n += 5; // теперь n = 7 (работает как n = n + 5)
n *= 2; // теперь n = 14 (работает как n = n * 2)

let m = 2;
m *= 3 + 5;
alert(m); // 16  (сначала выполнится правая часть, выражение идентично n *= 8)

// ======== Инкремент/декремент ========

let counter = 1;
let a = ++counter; // префиксная форма ++counter увеличивает counter и возвращает новое значение 2
alert(a); // 2

let counter2 = 1;
let b = counter2++; // постфиксная форма counter++ также увеличивает counter, но возвращает старое значение (которое было до увеличения).
alert(b); // 1

let counter3 = 1;
alert(2 * ++counter3); // 4

let counter4 = 1;
alert(2 * counter4++); // 2, потому что counter4++ возвращает "старое" значение
